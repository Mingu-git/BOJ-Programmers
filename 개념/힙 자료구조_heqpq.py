"""
힙 자료 구조


"""


1. 개념 및 사용 : import heapq : 이진트리 기반의 min heap 자료구조 제공. (자바의 priority Queue 와 비슷)

1.2 ************ 목적 : 최대값과 최소값을 찾는 연산을 빠르게 하기 위해  ********* 중요 

1.1 : 완전 이진트리기반의 min heap 구조라는것 : 가장 작은값의 원소가 루트를 이루며 오름차순으로 트리 구조 형성.
 == k번째 원소가 항상 자식의 원소(2k+1 , 2k+2 )보다 작음 

1.2 : 즉 arr[0]에 가장 작은 값이 있다고 해도 arr[1],arr[2]에 가장 작은값이 있다는 보장은 할수 없음.

2 : 사용 및 함수 

2.1 heappush() : heapq.heappush(arr,??)  : 2k + 1의 위차한 인덱스의 크기보다큼 == 트리구조
2.2.2    (log N) 의 시간 복잡도를 가짐 

2.2 heappop() : heapq.heappush(arr)  : 가장 작은값을 삭제후 리턴 + 트리의 위치도 재조정 = 매번 새로운 최소값을 인덱스 0에 위치시킴
2.2.1 (log N)의 시간 복잡도를 가짐
2.2.2 따라서 삭제하지 않고 최소값을 얻고싶을때는 arr[0] 을 사용 But arr[1]은 2번째로 작은수로 보장 불가

2.3 heapify() : heapq.heapify(arr) : 기존리스트 heap구조로 변환   == 비어있는 리스트 생성후 하나씩 추가한 효과랑 same
2.3.2 O(N)의 시간복잡도를 가진다.  == 리스트의 원자수에 비례

2.4 k 번째 최소값 = list 를 heap 구조로 만든후 k 번 pop을 해준시 k 번째 최소값 획득 가능

3: 힙 정렬 


[응용] max heap [최대 힙]

1. 원리 : min heap구조에서 튜플을 원소로 추가하거나 삭제시 튜플내에서 맨 앞에 있는 값을 기준으로 최소 힙이 구성됨. = 즉 튜플 앞원소값만 기준으로 배열
따라서 
heapq.heappush(arr, (-5,5)) 해줄시 [ 오른쪽 값 : 진짜 value ] 
[왼쪽 값 : 마이너스로 넣어야 가장 큰것 = 가장 작은것이 되기 때문에 max heap성질 충족]

1.2 튜플을 사용한다는것 == 우선순위를 정해준다는것 == 우선순위큐와 비슷하다는것을 알아두자

